// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleData role data
//
// swagger:model roleData
type RoleData struct {

	// description
	Description *ModelRoleDescription `json:"description" gorm:"type:varchar(255);unique;null;"`

	// name
	// Required: true
	Name ModelRoleName `json:"name" gorm:"type:varchar(128);not null;"`

	// slug
	// Required: true
	Slug ModelRoleSlug `json:"slug" gorm:"type:varchar(128);unique;not null;"`
}

// Validate validates this role data
func (m *RoleData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleData) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *RoleData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", ModelRoleName(m.Name)); err != nil {
		return err
	}

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *RoleData) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", ModelRoleSlug(m.Slug)); err != nil {
		return err
	}

	if err := m.Slug.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("slug")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("slug")
		}
		return err
	}

	return nil
}

// ContextValidate validate this role data based on the context it is used
func (m *RoleData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSlug(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleData) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {

		if swag.IsZero(m.Description) { // not required
			return nil
		}

		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *RoleData) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Name.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *RoleData) contextValidateSlug(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Slug.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("slug")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("slug")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoleData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleData) UnmarshalBinary(b []byte) error {
	var res RoleData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
