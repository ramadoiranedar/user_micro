// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserData user data
//
// swagger:model userData
type UserData struct {

	// birthdate
	// Required: true
	Birthdate ModelBirthdate `json:"birthdate" gorm:"type:int;not null;"`

	// email
	// Required: true
	// Format: email
	Email ModelEmail `json:"email" gorm:"type:varchar(255);unique;not null;"`

	// fullname
	// Required: true
	Fullname ModelFullname `json:"fullname" gorm:"type:varchar(255);not null;"`

	// gender
	// Required: true
	Gender ModelGender `json:"gender" gorm:"type:varchar(16);not null;"`

	// password
	// Required: true
	Password ModelPassword `json:"password" gorm:"type:varchar(255);not null;"`

	// role ids
	// Required: true
	RoleIds ModelRoleIds `json:"role_ids" gorm:"type:column:role_ids;type:integer[];"`

	// roles
	Roles *Role `json:"roles"`

	// token forgot password
	TokenForgotPassword *ModelTokenForgotPassword `json:"token_forgot_password" gorm:"type:varchar(255);null;"`

	// user
	User *User `json:"user"`

	// username
	// Required: true
	Username ModelUsername `json:"username" gorm:"type:varchar(255);unique;not null;"`
}

// Validate validates this user data
func (m *UserData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBirthdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenForgotPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserData) validateBirthdate(formats strfmt.Registry) error {

	if err := validate.Required("birthdate", "body", ModelBirthdate(m.Birthdate)); err != nil {
		return err
	}

	if err := m.Birthdate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("birthdate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("birthdate")
		}
		return err
	}

	return nil
}

func (m *UserData) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", ModelEmail(m.Email)); err != nil {
		return err
	}

	if err := m.Email.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("email")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("email")
		}
		return err
	}

	return nil
}

func (m *UserData) validateFullname(formats strfmt.Registry) error {

	if err := validate.Required("fullname", "body", ModelFullname(m.Fullname)); err != nil {
		return err
	}

	if err := m.Fullname.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fullname")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fullname")
		}
		return err
	}

	return nil
}

func (m *UserData) validateGender(formats strfmt.Registry) error {

	if err := validate.Required("gender", "body", ModelGender(m.Gender)); err != nil {
		return err
	}

	if err := m.Gender.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gender")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("gender")
		}
		return err
	}

	return nil
}

func (m *UserData) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", ModelPassword(m.Password)); err != nil {
		return err
	}

	if err := m.Password.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("password")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("password")
		}
		return err
	}

	return nil
}

func (m *UserData) validateRoleIds(formats strfmt.Registry) error {

	if err := validate.Required("role_ids", "body", m.RoleIds); err != nil {
		return err
	}

	if err := m.RoleIds.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role_ids")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("role_ids")
		}
		return err
	}

	return nil
}

func (m *UserData) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	if m.Roles != nil {
		if err := m.Roles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roles")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) validateTokenForgotPassword(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenForgotPassword) { // not required
		return nil
	}

	if m.TokenForgotPassword != nil {
		if err := m.TokenForgotPassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_forgot_password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_forgot_password")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", ModelUsername(m.Username)); err != nil {
		return err
	}

	if err := m.Username.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("username")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("username")
		}
		return err
	}

	return nil
}

// ContextValidate validate this user data based on the context it is used
func (m *UserData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBirthdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullname(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGender(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePassword(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokenForgotPassword(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsername(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserData) contextValidateBirthdate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Birthdate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("birthdate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("birthdate")
		}
		return err
	}

	return nil
}

func (m *UserData) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Email.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("email")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("email")
		}
		return err
	}

	return nil
}

func (m *UserData) contextValidateFullname(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Fullname.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fullname")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fullname")
		}
		return err
	}

	return nil
}

func (m *UserData) contextValidateGender(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Gender.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gender")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("gender")
		}
		return err
	}

	return nil
}

func (m *UserData) contextValidatePassword(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Password.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("password")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("password")
		}
		return err
	}

	return nil
}

func (m *UserData) contextValidateRoleIds(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RoleIds.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role_ids")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("role_ids")
		}
		return err
	}

	return nil
}

func (m *UserData) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	if m.Roles != nil {

		if swag.IsZero(m.Roles) { // not required
			return nil
		}

		if err := m.Roles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roles")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) contextValidateTokenForgotPassword(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenForgotPassword != nil {

		if swag.IsZero(m.TokenForgotPassword) { // not required
			return nil
		}

		if err := m.TokenForgotPassword.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_forgot_password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_forgot_password")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) contextValidateUsername(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Username.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("username")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("username")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserData) UnmarshalBinary(b []byte) error {
	var res UserData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
