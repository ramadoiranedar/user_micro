// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HealthCheckResponse definition for health response with code & message when request to endpoint was successfull
//
// swagger:model healthCheckResponse
type HealthCheckResponse struct {

	// code
	Code int32 `json:"code"`

	// message
	Message string `json:"message"`

	// results
	Results *HealthCheckResponseResults `json:"results"`
}

// Validate validates this health check response
func (m *HealthCheckResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthCheckResponse) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	if m.Results != nil {
		if err := m.Results.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("results")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this health check response based on the context it is used
func (m *HealthCheckResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthCheckResponse) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if m.Results != nil {

		if swag.IsZero(m.Results) { // not required
			return nil
		}

		if err := m.Results.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("results")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HealthCheckResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthCheckResponse) UnmarshalBinary(b []byte) error {
	var res HealthCheckResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HealthCheckResponseResults health check response results
//
// swagger:model HealthCheckResponseResults
type HealthCheckResponseResults struct {

	// app copyright
	AppCopyright string `json:"app_copyright,omitempty"`

	// app description
	AppDescription string `json:"app_description,omitempty"`

	// app environment
	AppEnvironment string `json:"app_environment,omitempty"`

	// app max upload mb
	AppMaxUploadMb int64 `json:"app_max_upload_mb,omitempty"`

	// app name
	AppName string `json:"app_name,omitempty"`

	// app version
	AppVersion string `json:"app_version,omitempty"`
}

// Validate validates this health check response results
func (m *HealthCheckResponseResults) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this health check response results based on context it is used
func (m *HealthCheckResponseResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthCheckResponseResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthCheckResponseResults) UnmarshalBinary(b []byte) error {
	var res HealthCheckResponseResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
