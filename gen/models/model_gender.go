// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelGender model gender
//
// swagger:model modelGender
type ModelGender string

func NewModelGender(value ModelGender) *ModelGender {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelGender.
func (m ModelGender) Pointer() *ModelGender {
	return &m
}

const (

	// ModelGenderMale captures enum value "male"
	ModelGenderMale ModelGender = "male"

	// ModelGenderFemale captures enum value "female"
	ModelGenderFemale ModelGender = "female"
)

// for schema
var modelGenderEnum []interface{}

func init() {
	var res []ModelGender
	if err := json.Unmarshal([]byte(`["male","female"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelGenderEnum = append(modelGenderEnum, v)
	}
}

func (m ModelGender) validateModelGenderEnum(path, location string, value ModelGender) error {
	if err := validate.EnumCase(path, location, value, modelGenderEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model gender
func (m ModelGender) Validate(formats strfmt.Registry) error {
	var res []error

	if err := validate.MaxLength("", "body", string(m), 16); err != nil {
		return err
	}

	// value enum
	if err := m.validateModelGenderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model gender based on context it is used
func (m ModelGender) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
