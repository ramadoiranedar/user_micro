// Code generated by go-swagger; DO NOT EDIT.

package health_check

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ramadoiranedar/user_micro/gen/models"
)

// GetV1HealthReader is a Reader for the GetV1Health structure.
type GetV1HealthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1HealthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1HealthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewGetV1HealthCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetV1HealthBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetV1HealthUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetV1HealthForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetV1HealthNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetV1HealthMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetV1HealthUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetV1HealthUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetV1HealthInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetV1HealthBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetV1HealthDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetV1HealthOK creates a GetV1HealthOK with default headers values
func NewGetV1HealthOK() *GetV1HealthOK {
	return &GetV1HealthOK{}
}

/*
GetV1HealthOK describes a response with status code 200, with default header values.

ok
*/
type GetV1HealthOK struct {
	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health o k response has a 2xx status code
func (o *GetV1HealthOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 health o k response has a 3xx status code
func (o *GetV1HealthOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 health o k response has a 4xx status code
func (o *GetV1HealthOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 health o k response has a 5xx status code
func (o *GetV1HealthOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 health o k response a status code equal to that given
func (o *GetV1HealthOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 health o k response
func (o *GetV1HealthOK) Code() int {
	return 200
}

func (o *GetV1HealthOK) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthOK  %+v", 200, o.Payload)
}

func (o *GetV1HealthOK) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthOK  %+v", 200, o.Payload)
}

func (o *GetV1HealthOK) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HealthCreated creates a GetV1HealthCreated with default headers values
func NewGetV1HealthCreated() *GetV1HealthCreated {
	return &GetV1HealthCreated{}
}

/*
GetV1HealthCreated describes a response with status code 201, with default header values.

created
*/
type GetV1HealthCreated struct {
	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health created response has a 2xx status code
func (o *GetV1HealthCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 health created response has a 3xx status code
func (o *GetV1HealthCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 health created response has a 4xx status code
func (o *GetV1HealthCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 health created response has a 5xx status code
func (o *GetV1HealthCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 health created response a status code equal to that given
func (o *GetV1HealthCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the get v1 health created response
func (o *GetV1HealthCreated) Code() int {
	return 201
}

func (o *GetV1HealthCreated) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthCreated  %+v", 201, o.Payload)
}

func (o *GetV1HealthCreated) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthCreated  %+v", 201, o.Payload)
}

func (o *GetV1HealthCreated) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HealthBadRequest creates a GetV1HealthBadRequest with default headers values
func NewGetV1HealthBadRequest() *GetV1HealthBadRequest {
	return &GetV1HealthBadRequest{}
}

/*
GetV1HealthBadRequest describes a response with status code 400, with default header values.

bad request
*/
type GetV1HealthBadRequest struct {
	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health bad request response has a 2xx status code
func (o *GetV1HealthBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 health bad request response has a 3xx status code
func (o *GetV1HealthBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 health bad request response has a 4xx status code
func (o *GetV1HealthBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 health bad request response has a 5xx status code
func (o *GetV1HealthBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 health bad request response a status code equal to that given
func (o *GetV1HealthBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get v1 health bad request response
func (o *GetV1HealthBadRequest) Code() int {
	return 400
}

func (o *GetV1HealthBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthBadRequest  %+v", 400, o.Payload)
}

func (o *GetV1HealthBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthBadRequest  %+v", 400, o.Payload)
}

func (o *GetV1HealthBadRequest) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HealthUnauthorized creates a GetV1HealthUnauthorized with default headers values
func NewGetV1HealthUnauthorized() *GetV1HealthUnauthorized {
	return &GetV1HealthUnauthorized{}
}

/*
GetV1HealthUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetV1HealthUnauthorized struct {
	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health unauthorized response has a 2xx status code
func (o *GetV1HealthUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 health unauthorized response has a 3xx status code
func (o *GetV1HealthUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 health unauthorized response has a 4xx status code
func (o *GetV1HealthUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 health unauthorized response has a 5xx status code
func (o *GetV1HealthUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 health unauthorized response a status code equal to that given
func (o *GetV1HealthUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get v1 health unauthorized response
func (o *GetV1HealthUnauthorized) Code() int {
	return 401
}

func (o *GetV1HealthUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthUnauthorized  %+v", 401, o.Payload)
}

func (o *GetV1HealthUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthUnauthorized  %+v", 401, o.Payload)
}

func (o *GetV1HealthUnauthorized) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HealthForbidden creates a GetV1HealthForbidden with default headers values
func NewGetV1HealthForbidden() *GetV1HealthForbidden {
	return &GetV1HealthForbidden{}
}

/*
GetV1HealthForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetV1HealthForbidden struct {
	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health forbidden response has a 2xx status code
func (o *GetV1HealthForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 health forbidden response has a 3xx status code
func (o *GetV1HealthForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 health forbidden response has a 4xx status code
func (o *GetV1HealthForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 health forbidden response has a 5xx status code
func (o *GetV1HealthForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 health forbidden response a status code equal to that given
func (o *GetV1HealthForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get v1 health forbidden response
func (o *GetV1HealthForbidden) Code() int {
	return 403
}

func (o *GetV1HealthForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthForbidden  %+v", 403, o.Payload)
}

func (o *GetV1HealthForbidden) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthForbidden  %+v", 403, o.Payload)
}

func (o *GetV1HealthForbidden) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HealthNotFound creates a GetV1HealthNotFound with default headers values
func NewGetV1HealthNotFound() *GetV1HealthNotFound {
	return &GetV1HealthNotFound{}
}

/*
GetV1HealthNotFound describes a response with status code 404, with default header values.

not found
*/
type GetV1HealthNotFound struct {
	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health not found response has a 2xx status code
func (o *GetV1HealthNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 health not found response has a 3xx status code
func (o *GetV1HealthNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 health not found response has a 4xx status code
func (o *GetV1HealthNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 health not found response has a 5xx status code
func (o *GetV1HealthNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 health not found response a status code equal to that given
func (o *GetV1HealthNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get v1 health not found response
func (o *GetV1HealthNotFound) Code() int {
	return 404
}

func (o *GetV1HealthNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthNotFound  %+v", 404, o.Payload)
}

func (o *GetV1HealthNotFound) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthNotFound  %+v", 404, o.Payload)
}

func (o *GetV1HealthNotFound) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HealthMethodNotAllowed creates a GetV1HealthMethodNotAllowed with default headers values
func NewGetV1HealthMethodNotAllowed() *GetV1HealthMethodNotAllowed {
	return &GetV1HealthMethodNotAllowed{}
}

/*
GetV1HealthMethodNotAllowed describes a response with status code 405, with default header values.

method not allowed
*/
type GetV1HealthMethodNotAllowed struct {
	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health method not allowed response has a 2xx status code
func (o *GetV1HealthMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 health method not allowed response has a 3xx status code
func (o *GetV1HealthMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 health method not allowed response has a 4xx status code
func (o *GetV1HealthMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 health method not allowed response has a 5xx status code
func (o *GetV1HealthMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 health method not allowed response a status code equal to that given
func (o *GetV1HealthMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get v1 health method not allowed response
func (o *GetV1HealthMethodNotAllowed) Code() int {
	return 405
}

func (o *GetV1HealthMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetV1HealthMethodNotAllowed) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetV1HealthMethodNotAllowed) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HealthUnsupportedMediaType creates a GetV1HealthUnsupportedMediaType with default headers values
func NewGetV1HealthUnsupportedMediaType() *GetV1HealthUnsupportedMediaType {
	return &GetV1HealthUnsupportedMediaType{}
}

/*
GetV1HealthUnsupportedMediaType describes a response with status code 415, with default header values.

unsupported media type
*/
type GetV1HealthUnsupportedMediaType struct {
	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health unsupported media type response has a 2xx status code
func (o *GetV1HealthUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 health unsupported media type response has a 3xx status code
func (o *GetV1HealthUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 health unsupported media type response has a 4xx status code
func (o *GetV1HealthUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 health unsupported media type response has a 5xx status code
func (o *GetV1HealthUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 health unsupported media type response a status code equal to that given
func (o *GetV1HealthUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the get v1 health unsupported media type response
func (o *GetV1HealthUnsupportedMediaType) Code() int {
	return 415
}

func (o *GetV1HealthUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetV1HealthUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetV1HealthUnsupportedMediaType) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HealthUnprocessableEntity creates a GetV1HealthUnprocessableEntity with default headers values
func NewGetV1HealthUnprocessableEntity() *GetV1HealthUnprocessableEntity {
	return &GetV1HealthUnprocessableEntity{}
}

/*
GetV1HealthUnprocessableEntity describes a response with status code 422, with default header values.

unprocessable entity
*/
type GetV1HealthUnprocessableEntity struct {
	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health unprocessable entity response has a 2xx status code
func (o *GetV1HealthUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 health unprocessable entity response has a 3xx status code
func (o *GetV1HealthUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 health unprocessable entity response has a 4xx status code
func (o *GetV1HealthUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 health unprocessable entity response has a 5xx status code
func (o *GetV1HealthUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 health unprocessable entity response a status code equal to that given
func (o *GetV1HealthUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get v1 health unprocessable entity response
func (o *GetV1HealthUnprocessableEntity) Code() int {
	return 422
}

func (o *GetV1HealthUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetV1HealthUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetV1HealthUnprocessableEntity) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HealthInternalServerError creates a GetV1HealthInternalServerError with default headers values
func NewGetV1HealthInternalServerError() *GetV1HealthInternalServerError {
	return &GetV1HealthInternalServerError{}
}

/*
GetV1HealthInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type GetV1HealthInternalServerError struct {
	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health internal server error response has a 2xx status code
func (o *GetV1HealthInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 health internal server error response has a 3xx status code
func (o *GetV1HealthInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 health internal server error response has a 4xx status code
func (o *GetV1HealthInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 health internal server error response has a 5xx status code
func (o *GetV1HealthInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get v1 health internal server error response a status code equal to that given
func (o *GetV1HealthInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get v1 health internal server error response
func (o *GetV1HealthInternalServerError) Code() int {
	return 500
}

func (o *GetV1HealthInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthInternalServerError  %+v", 500, o.Payload)
}

func (o *GetV1HealthInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthInternalServerError  %+v", 500, o.Payload)
}

func (o *GetV1HealthInternalServerError) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HealthBadGateway creates a GetV1HealthBadGateway with default headers values
func NewGetV1HealthBadGateway() *GetV1HealthBadGateway {
	return &GetV1HealthBadGateway{}
}

/*
GetV1HealthBadGateway describes a response with status code 502, with default header values.

bad gateway
*/
type GetV1HealthBadGateway struct {
	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health bad gateway response has a 2xx status code
func (o *GetV1HealthBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 health bad gateway response has a 3xx status code
func (o *GetV1HealthBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 health bad gateway response has a 4xx status code
func (o *GetV1HealthBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 health bad gateway response has a 5xx status code
func (o *GetV1HealthBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this get v1 health bad gateway response a status code equal to that given
func (o *GetV1HealthBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the get v1 health bad gateway response
func (o *GetV1HealthBadGateway) Code() int {
	return 502
}

func (o *GetV1HealthBadGateway) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthBadGateway  %+v", 502, o.Payload)
}

func (o *GetV1HealthBadGateway) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] getV1HealthBadGateway  %+v", 502, o.Payload)
}

func (o *GetV1HealthBadGateway) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HealthDefault creates a GetV1HealthDefault with default headers values
func NewGetV1HealthDefault(code int) *GetV1HealthDefault {
	return &GetV1HealthDefault{
		_statusCode: code,
	}
}

/*
GetV1HealthDefault describes a response with status code -1, with default header values.

default
*/
type GetV1HealthDefault struct {
	_statusCode int

	Payload *models.BasicResponse
}

// IsSuccess returns true when this get v1 health default response has a 2xx status code
func (o *GetV1HealthDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get v1 health default response has a 3xx status code
func (o *GetV1HealthDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get v1 health default response has a 4xx status code
func (o *GetV1HealthDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get v1 health default response has a 5xx status code
func (o *GetV1HealthDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get v1 health default response a status code equal to that given
func (o *GetV1HealthDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get v1 health default response
func (o *GetV1HealthDefault) Code() int {
	return o._statusCode
}

func (o *GetV1HealthDefault) Error() string {
	return fmt.Sprintf("[GET /v1/health][%d] GetV1Health default  %+v", o._statusCode, o.Payload)
}

func (o *GetV1HealthDefault) String() string {
	return fmt.Sprintf("[GET /v1/health][%d] GetV1Health default  %+v", o._statusCode, o.Payload)
}

func (o *GetV1HealthDefault) GetPayload() *models.BasicResponse {
	return o.Payload
}

func (o *GetV1HealthDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
